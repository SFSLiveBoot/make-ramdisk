#!/bin/sh

voldir=/dev/disk/by-label
rr=/realroot
init="/sbin/init"
udevl="err"
drivers="sd-mod,sr-mod,ide-disk,ide-cd,usb-storage,uas,dm-mod,usbhid,hid-generic,virtio-blk,virtio-net,rtsx-pci-sdmmc,mmc-block,sdhci-acpi"
dev_tmout=35
dhcp_delay=5
iface_upwait=10
max_loop=64
arch="$(uname -m || true)"
kver="$(uname -r || true)"
wpa_conf="/etc/wpa.conf"
dev_console="dev/console"
ntfs3g_opts="rw,uid=0,gid=4,fmask=0137,dmask=0027"

#
# functions
#
log () {
  test -n "$quiet" || echo "$@"
}

create_devices() {
  /sbin/hotplug INITIALIZE_SYS
}

init_hotplug() {
  log -n "hotplug "
  create_devices
  echo /sbin/hotplug >/proc/sys/kernel/hotplug || hotplug_fail="reg"
  log
}

init_udev () {
  local udev_db
  log -n "udev "
  if test -d /run ;then
    test -d /run/udev || mkdir -p /run/udev
  else
    test -d /dev/.udev || mount -t tmpfs -o mode=755,size=2M none /dev
    mkdir -p /dev/.udev/db/ /dev/.udev/queue/
  fi
  test -e /dev/null || mknod /dev/null c 1 3
  test -e /dev/console || mknod /dev/console c 5 1
  test -e /dev/tty || mknod /dev/tty c 5 0
  echo "udev_log=\"$udevl\"" >/etc/udev/udev.conf
  test -z "$no_volid" || echo "# Disabled with no_volid" >/etc/udev/rules.d/vol_id.rules
  test ! -e /proc/sys/kernel/hotplug || echo >/proc/sys/kernel/hotplug
  test -n "`getpids udevd`" || udevd --daemon
  log -n "generating devices "
  udevadm trigger
  udevadm settle
  log
}

init_pkcs11() {
  mkdir -p /var/run/openct /var/run/pcscd
  openct-control init
}

stop_pkcs11() {
  killall pcscd || true
  test ! -e /var/run/openct/status || openct-control shutdown
}

init_ramdisk () {
  mkdir -p /sys /proc /tmp $rr /etc/udev /var/log /mnt /parts /usr/sbin /usr/bin /sbin /dev/pts
  test -d /run || { mkdir -p /run ; mount -t tmpfs -o nosuid,noexec,mode=0755 shmfs /run ; }
  echo -n >>/etc/fstab
  test -e /etc/mtab -o -L /etc/mtab || ln -s /proc/mounts /etc/mtab
  test -d /proc/$$ || mount -t proc none /proc 
  test -d /sys/kernel || mount -t sysfs none /sys
  grep -q /dev /proc/mounts || mount -t devtmpfs devtmpfs /dev || echo "Failed to mount /dev .."
  echo -n '[9;0]'
  test ! -x /bin/busybox || /bin/busybox --install -s || false
}

init_wifi() {
  local ifdir real_wpa_conf
  which wpa_supplicant >/dev/null || return 0
  real_wpa_conf="$(prepare_file "$wpa_conf")"
  test -e "$real_wpa_conf" || return 0
  test -n "$wifi_iface" || {
    for ifdir in /sys/class/net/*;do
      test ! -e "$ifdir/phy80211" || {
        wifi_iface="${ifdir##*/}"
        break
      }
    done
  }
  test -n "$wifi_iface" || {
    echo "80211 interface not found" >&2
    return 1
  }
  log "running wpa_supplicant on $wifi_iface using $real_wpa_conf"
  wpa_supplicant -B -Dnl80211 -i"$wifi_iface" -c"$real_wpa_conf"
}

init_modprobe () {
  local moda modalias mod
  log -n "loading drivers: $drivers"
  for mod in $(str_split , $drivers);do
    modprobe $qswitch $mod || true
  done

  if test -r /etc/modules.preload;then
    log -n "Pre-loading modules: "
    while read module ;do
      log -n $module
      modprobe $qswitch $module || true
    done < /etc/modules.preload
    log
  fi

  enter_stage pci
  log -n " PCI"
  test ! -d /sys/bus/pci/devices || for moda in /sys/bus/pci/devices/*/modalias;do
    log -n .
    read modalias <$moda
    modprobe $qswitch $modalias || true
  done
  log
}

next_mark () {
  case $1 in
    "/") echo "-";;
    "-") echo "\\";;
    "\\") echo "|";;
    "|") echo "/";;
    *) echo "/";;
  esac
}

wait_exist() {
  local device="$1"
  local timeout="${2:-$dev_tmout}"
  local devinfo="[$device"
  while test ! -e "$device" -a "$timeout" != "0";do
    mark="$(next_mark $mark)"
    echo -n "$devinfo$mark"
    devinfo=""
    sleep 1
    timeout=$(($timeout-1))
    test -z "$hotplug_fail" || create_devices
  done
  test -n "$devinfo" || echo "]"
}

fs_type() {
  blkid -o value -s TYPE "$1" || true
}

fs_uuid() {
  blkid -o value -s UUID "$1" || true
}

list_partitions() {
  local major minor blocks name devs spc=""
  while read major minor blocks name; do
    test -n "$name" -a -e "/dev/$name" || continue
    echo -n "$spc/dev/$name"
    spc=" "
  done < /proc/partitions
  test -z "$spc" || echo
}

parse_uri() {
  local r
  uri_schema="" uri_host="" uri_user="" uri_share="" uri_path="" uri_file="" uri_port=""
  case "$1" in
    *://*) uri_schema="${1%%://*}"; r="${1#*://}";;
    /*) uri_schema="file" uri_path="$1" uri_file="$1"; return;;
    *) return 1;;
  esac
  case "$r" in
    *@*) uri_user="${r%%@*}"; r="${r#*@}" ;;
  esac
  case "$r" in
    */*) uri_host="${r%%/*}" r="${r#*/}"; case "$uri_host" in *:[0-9]*) uri_port="${uri_host##*:}"; uri_host="${uri_host%:*}";;esac; uri_path="${r:-/}" ;;
    *) uri_host="$r"; case "$uri_host" in *:[0-9]*) uri_port="${uri_host##*:}"; uri_host="${uri_host%:*}";;esac; uri_path="/"; uri_file="/"; return;;
  esac
  case "$r" in
    *:*) uri_share="${r%%:*}" uri_file="${r#*:}";;
    */*) uri_share="${r%%/*}" uri_file="${r#*/}";;
    *) uri_file="$uri_path";;
  esac
}

prepare_file_smb() {
  parse_uri "$1"
  local mnt="${2:-$(mktemp -d /mnt/smb-XXXXXX)}"
  test -n "$uri_user" || { echo -n "User for //$uri_host/$uri_share: " >&2 ; read user ; }
  case "$uri_user" in %) uri_user=",guest" ;;esac
  mount.cifs "//$uri_host/$uri_share" "$mnt" -o "user=$uri_user,noperm" >&2
  echo -n "$mnt/" >/tmp/.last-dev
  expand_wildcards "$mnt/$uri_file"
}

prepare_file_tftp() {
  local file="${1#tftp://}" dst="${2:-/tmp}" host
  host="${file%%/*}"
  file="${file#*/}"
  tftp -g -l "$dst/${file##*/}" -r "$file" "$host" >&2
  echo "$dst/${file##*/}"
}

prepare_file_wget() {
  local src="$1" dest_dir="${2:-/tmp}" src_comp comp_pat
  local src_proto="${src%%://*}"
  local src_hostpath="${src#*://}"
  echo -n "$src_proto://${src_hostpath%%/*}/" >/tmp/.last-dev
  case "$src" in
    *.list)
      src_dir="${src%/*}"
      for src_comp in $(wget -O - "$src");do
        wget -O "$dest_dir/$src_comp" "$src_dir/$src_comp" >&2
        echo "$dest_dir/$src_comp"
      done
    ;;
    *"*"*)
      comp_pat="${src##*/}"
      src_dir="${src%/*}"
      for src_comp in $(wget -O - "$src_dir/" | grep -o '"[^"[:space:]]*"' | cut -f2 -d'"');do
        case "$src_comp" in $comp_pat)
          wget -O "$dest_dir/$src_comp" "$src_dir/$src_comp" >&2
          echo "$dest_dir/$src_comp"
          ;;
        esac
      done
      ;;
    *)
      wget -O "$dest_dir/${1##*/}" "$1" >&2
      echo "$dest_dir/${1##*/}"
    ;;
  esac
}

prepare_file_pkcs15() {
  local fname="${1#pkcs15://}" pcscd_pid
  local dest_dir="${2:-/tmp}"
  mkdir -p /var/run/pcscd
  pcscd -x >&2
  pkcs15-tool -w -R "$fname" -o "$dest_dir/${fname##*/}" >&2 && { clear >&2 || true; }
  test ! -e /var/run/pcscd/pcscd.pid || {
    read pcscd_pid < /var/run/pcscd/pcscd.pid
    test ! -e "/proc/$pcscd_pid/exe" || kill "$pcscd_pid"
  }
  echo "$dest_dir/${fname##*/}"
}

expand_wildcards() {
  local fname="$1" fname_match lmpt n
  case "$fname" in
    *.lst)
      lmpt="${fname%/*}"
      for n in $(cat "$fname");do
        echo "$(expand_vars "$lmpt/$n")"
      done
    ;;
    *"*"*|*"["*"]"*)
      for fname_match in $fname;do
        echo "$fname_match"
      done
    ;;
    *) echo "$fname";;
  esac
}

prepare_file_dev() {
  local dev="${1%%:*}" fname="${1#*:}"  fname_match
  local mpt="${2:-$(mktemp -d /mnt/prep-XXXXXX)}"
  prepare_dev "$dev" >&2
  test "$prepared_filesystem" = "ntfs" -a -x "$(which ntfs-3g)" &&
    ntfs-3g -o "${mntopts:-$ntfs3g_opts}" $prepared_device $mpt ||
    mount -o "${mntopts:-ro}" -t $prepared_filesystem $prepared_device $mpt
  echo -n "$mpt/" >/tmp/.last-dev
  expand_wildcards "$mpt/$fname"
}

prepare_file_nbd() {
  local num=0
  parse_uri "$1"
  test -d /sys/block/nbd$num || modprobe nbd
  while test -e /sys/block/nbd$num/pid; do num=$(($num+1)) ;done
  case "$uri_path" in
   /) xnbd-client $uri_host $uri_port /dev/nbd$num >&2; echo -n "nbd://$uri_host:" >/tmp/.last-dev;;
   *) xnbd-client --exportname "$uri_path" $uri_host $uri_port /dev/nbd$num >&2; echo -n "nbd://$uri_host:$uri_port/" >/tmp/.last-dev;;
  esac
  echo "/dev/nbd$num"
}

prepare_file_virt9p() {
  parse_uri "$1"
  local mpt="${2:-$(mktemp -d /mnt/prep-XXXXXX)}"
  mount -t 9p -o trans=virtio,version=9p2000.L "$uri_host" "$mpt"
  echo -n "$mpt/" >/tmp/.last-dev
  expand_wildcards "$mpt/$uri_path"
}

prepare_file() {
  local src="$1" dest_dir="$2"
  case "$src" in
    :*) src="$(cat /tmp/.last-dev)${src#:}"; shift; set -- "$src" "$@";;
  esac
  case "$src" in 
    smb://*) prepare_file_smb "$@";;
    tftp://*) prepare_file_tftp "$@" ;;
    http://*|https://*) prepare_file_wget "$@" ;;
    ftp://*) prepare_file_wget "$@" ;;
    pkcs15://*) prepare_file_pkcs15 "$@" ;;
    nbd://*) prepare_file_nbd "$@" ;;
    virt9p://*) prepare_file_virt9p "$@" ;;
    @*:*|/dev/*:*|UUID=*:*|LABEL=*:*) prepare_file_dev "$@" ;;
    /*) expand_wildcards "$1";;
    *)
       echo "Unknown prepare_file: '$1'" >&2
       return 1
    ;;
  esac
}

load_loop() {
  local major dev
  while read major dev; do
    test "'loop'" != "'$dev'" || {
      loop_loaded=1
      break
    }
  done < /proc/devices
  test "1" = "$loop_loaded" || modprobe loop ${max_loop:+max_loop=$max_loop}
  loop_loaded=1
}

prepare_dev () {
  local _dev="$1"
  local timeout="$2"
  local cryptkey="$gck"
  local _cryptkey udev_pids
  local _l_dev _fs
  case "$_dev" in
    LABEL=*) _dev="@${_dev#LABEL=}";;
    UUID=*) _dev="/dev/disk/by-uuid/${_dev#UUID=}";;
  esac
  case "$_dev" in
    *"?"*)
      mntopts="${_dev#*\?}"
      _dev="${_dev%%\?*}"
      ;;
  esac
  if test -z "${_dev%@*}";then
    if _l_dev="$(blkid -L "${_dev#@}")";then
      _dev="$_l_dev"
    else 
      _dev="$voldir/${_dev#@}"
    fi
  fi
  wait_exist "$_dev" "$timeout"
  if test -e "$_dev";then
    local fileext="${_dev##*.}"
    if ! test -b "$_dev";then
      test -n "$loop_loaded" || load_loop
      test -z "$hotplug_fail" || create_devices
      while ! test -e /dev/loop0; do sleep 1;done
      local loopdev=`losetup -f`
      losetup $loopdev "$_dev"
      _dev="$loopdev"
    fi
    wait_exist "$_dev"
    _fs="$(fs_type "$_dev")"
    if test "$_fs" = "crypto_LUKS" -o "$_fs" = "swap" && cryptsetup isLuks "$_dev";then
      modprobe dm-crypt
      if test -z "$cryptkey" ;then
        if ! cryptsetup -t 20 $cryptopts luksOpen "$_dev" "${_dev##*/}-dec";then
          echo -n "{$?} $_dev ck: "
          read cryptkey
        fi
      fi
      if test -n "$cryptkey";then
        cryptsetup -d "$(prepare_file "$cryptkey")" $cryptopts luksOpen "$_dev" "${_dev##*/}-dec"
      fi
      _dev="/dev/mapper/${_dev##*/}-dec"
      wait_exist "$_dev"
      _fs="$(fs_type $_dev)"
    fi
    test -n "$_fs" -o "$fileext" != "sfs" || _fs=squashfs
    test "$_fs" != "LVM2_member" -o ! -x /sbin/lvm || refresh_lvm
    prepared_device="$_dev"
    prepared_filesystem="$_fs"
  else
    return 1
  fi
}

decrypt_pkcs11() {
  local enc_file="$1" inkey="${2:-slot_01}"
  openssl rsautl -engine pkcs11 -keyform engine -inkey $inkey -decrypt -in "$enc_file"
}

find_ifaces() {
  local name="${1:-all}" ifdir="" curif=""
  for ifdir in /sys/class/net/*;do
    echo -n "${curif:+ }"
    curif="${ifdir##*/}"
    test "$curif" != "lo" || continue
    test "$name" != "all" || echo -n "$curif"
    test "$curif" != "$name" || echo -n "$curif"
  done
}

ip_link_up() {
  local iface="$1" up_addr="169.254.1.1:::255.255.0.0:"
  if test "x$iface" = "xlo"; then up_addr="127.0.0.1::::"; fi
  if type ip >/dev/null; then ip link set up dev "$iface"
  else ipconfig -d $up_addr:$iface:off;fi
}

is_iface_up() {
  local iface="$1"
  if type ip >dev/null;then
    ip link show dev "$iface" | grep -v NO-CARRIER | grep -q UP
    return $?
  else
    case "$(cat /sys/class/net/$iface/operstate)" in
      up) return 0;;
      *) return 1;;
    esac
  fi
}

wait_ifup() {
  local ifaces iface="" maxwait="$iface_upwait"
  ifaces="$(find_ifaces "$1")"
  test -n "$ifaces" || return 0
  echo -n "Waiting for $ifaces to come up.." >&2
  for iface in $ifaces;do ip_link_up "$iface" ; done
  while test "$maxwait" -gt 0;do
    for iface in $ifaces;do
      if is_iface_up "$iface";then
        echo "Ok ($iface)" >&2
        echo $iface
        return 0
      fi
    done
    maxwait="$(($maxwait-1))"
    echo -n " $maxwait" >&2
    sleep 1
  done
  echo "No interface ($ifaces) become up in $maxwait seconds" >&2
  return 1
}

get_dhcp_lease() {
  local iface="$1"
  if type udhcpc >/dev/null;then
    udhcpc ${dhcp_delay:+-T $dhcp_delay -t 2} -n -q ${iface:+-i $iface}
    return $?
  else
    ipconfig -o ${dhcp_delay:+-t $dhcp_delay} -d ${iface:-all}
    return $?
  fi
}

init_net () {
  log -n "net "
  local ip="$1" i iface_up
  local dns netconf IPV4ADDR IPV4BROADCAST IPV4DNS0 IPV4DNS1 IPV4GATEWAY IPV4NETMASK NISDOMAIN DEVICE DNSDOMAIN iface ROOTSERVER #HOSTNAME

  ip_link_up lo
  case "$ip" in
    *:*:*:*:*:*:*) ipconfig -o ${dhcp_delay:+-t $dhcp_delay} -d $ip ;;
    *:dhcp)
      iface="${ip%:dhcp}"
      wait_ifup "$iface"
      get_dhcp_lease "$iface"
    ;;
    dhcp)
      iface_up=$(wait_ifup all)
      echo -n "DHCP.."
      for i in 9 8 7 6 5 4 3 2 1 FAIL;do
        echo -n "$i "
        if get_dhcp_lease $iface_up;then break;fi
      done
      echo
      test "$i" != FAIL
    ;;
  esac
  for netconf in /tmp/net-*.conf;do
    test -e "$netconf" || continue
    . $netconf
    test -z "$DNSDOMAIN" || echo "domain $DNSDOMAIN" >>/etc/resolv.conf
    test -z "$ROOTSERVER" -o "$ROOTSERVER" = "0.0.0.0" || echo "$ROOTSERVER server" >>/etc/hosts
    for dns in $IPV4DNS0 $IPV4DNS1;do
      test "$dns" = "0.0.0.0" || echo "nameserver $dns" >>/etc/resolv.conf
    done
  done
  log
}

getpids() {
  local progname="$1" pids="" cmd pid others stat
  for stat in /proc/[0-9]*/stat;do
    if read pid cmd others <$stat;then
      test "($progname)" != "$cmd" || pids="$pids${pids:+ }$pid"
    fi
  done
  echo "$pids"
}

killall () {
  local progname="$1" pid
  pid="`getpids $progname`"
  test -z "$pid" || kill $pid
}

get_mount_type () {
  local mpt="$1"
  local dev pnt type opts other mnt_type
  while read dev pnt type opts other;do
    test "$pnt" != "$mpt" || mnt_type="$type"
  done </proc/mounts
  echo $mnt_type
}

finalize_boot () {
  killall udevd || true
  local migrate_list src mpt opts
  while read src mpt opts; do
    case $mpt in
      /mnt/*) umount "$mpt" || true;; 
      /dev|/sys|/live*|/proc|/run) if test -e $rr$mpt || mkdir -p $rr$mpt;then migrate_list="$mpt $migrate_list"; fi;;
    esac
  done </proc/mounts

  dmsetup remove_all || true

  log -n "Migrating:"
  for mpt in $migrate_list;do
    log -n " $mpt"
    mount -o move $mpt $rr$mpt
  done
  test ! -e /etc/resolv.conf || test -e $rr/etc/resolv.conf || test ! -w $rr/etc || cat /etc/resolv.conf >$rr/etc/resolv.conf || true
  test -e "$rr/$dev_console" || { mkdir -p $rr/dev && mknod "$rr/$dev_console" c 5 1 || dev_console="" ; }
  log

  enter_stage runinit
  if test -L "$rr$init" || test -x $rr$init -a -f $rr$init;then
    log "End of ramdisk: run-init $rr $init"
    test -z "$brk" || return
    test -n "$quiet" || set -x
    cd "$rr"
    exec run-init ${dev_console:+-c $dev_console} $rr $init
  else
    echo "Refusing to run-init: '$init' on '$rr' is not executable file"
  fi
}

add_chained_mpt() {
  chained_parts="$1${chained_parts:+ $chained_parts}"
}

mount_device() {
  local device="$1" mpt="$2"
  prepare_dev $device
  if test "$prepared_filesystem" = "ntfs" -a -x "$(which ntfs-3g)";then
    ntfs-3g -o "${mntopts:-rw}" $prepared_device $mpt
  else
    mount -o "${mntopts:-ro}" -t $prepared_filesystem $prepared_device $mpt
  fi
}

chained_mount () {
  local devpath="$1" local mpt="$2" lastpath_file
  local uri_host uri_share uri_user uri_file

  case "$devpath" in
    smb://*)
      mkdir -p /live

      uri_host="${devpath#smb://}"
      uri_share="${uri_host#*/}"
      uri_host="${uri_host%%/*}"
      uri_user="${uri_host%%@*}"
      uri_host="${uri_host#*@}"
      uri_file="${uri_share#*:}"
      uri_share="${uri_share%%:*}"
      test ! "x$uri_host" = "x$uri_user" || uri_user=""
      test ! "x$uri_file" = "x$uri_share" || uri_file=""

      if test -z "$uri_file";then
        mkdir -p "$mpt"
        mount.cifs "//$uri_host/$uri_share" -o "noperm${uri_user:+,user=$uri_user}" "$mpt"
      else
        devpath_src=/live
        test -z "$lcount" || {
          mkdir -p /live$lcount
          mount -o move /live /live$lcount
        }
        mkdir -p /live
        lcount=$((${lcount:-0}+1))
        mount.cifs "//$uri_host/$uri_share" -o "noperm${uri_user:+,user=$uri_user}" "$devpath_src"
        chained_mount ":$uri_file" "$mpt"
      fi
    ;;
    *:*)
      local prepath="${devpath%%:*}"
      devpath="${devpath#*:}"
      
      test -z "$prepath" || {
        if test "$live_is_tmpfs" = "1";then
          devpath_src="/live/mnt/${prepath##*/}"
          mkdir -p "$devpath_src"
          chained_mount "$prepath" "$devpath_src"
        else
          devpath_src=/live
          test -z "$lcount" || {
            mkdir -p /live$lcount
            mount -o move /live /live$lcount
          }
          mkdir -p /live
          chained_mount $prepath /live
          lcount=$((${lcount:-0}+1))
        fi
      }
      case "$devpath" in
        *"*"*)
          local idx=0 n
          for lastpath_file in "$devpath_src"/$devpath;do
            n="${lastpath_file##*/}"
            test -z "$live_is_tmpfs" || {
              echo -n "Copying $n .."
              cp "$lastpath_file" /live
              echo "ok."
              lastpath_file="/live/$n"
            }
            n="${n%.[0-9a-z][0-9a-z]*}"
            log "Mounting $lastpath_file to ${mpt}-$idx-$n"
            mkdir -p "${mpt}-$idx-$n"
            chained_mount $lastpath_file ${mpt}-$idx-$n
            idx=$(($idx+1))
          done
        ;;
        *)
          lastpath_file="$devpath_src/$devpath"
          test -z "$live_is_tmpfs" || {
            n="${lastpath_file##*/}"
            echo -n "Copying $n .."
            cp "$lastpath_file" /live
            echo "ok."
            lastpath_file="/live/$n"
          }
          chained_mount "$lastpath_file" $mpt
        ;;
      esac
      ;;
    *)
      case "$devpath" in
        mem) mount -t tmpfs -o mode=755 none $mpt;;
        [0-9]*[kmgKMG]) mount -t tmpfs -o mode=755 -o size=$devpath none $mpt ;;
	virt9p-*) mount -t 9p -o trans=virtio,version=9p2000.L ${devpath#virt9p-} $mpt;;
        *) mount_device "$devpath" "$mpt";;
      esac
      case "$mpt" in /parts/*) add_chained_mpt "$mpt";; esac
    ;;
  esac
}

str_split() {
  local IFS_save="$IFS" part split_chars="$1" parts="$2" spc=""
  IFS="$split_chars"
  for part in $parts;do
    IFS="$IFS_save"
    echo -n "$spc$part"
    spc=" "
  done
  test -z "$spc" || echo
}

basename() {
  local name="$1" suffix="$2"
  while test "x$name" != "x${name%/}" -a -n "${name%/}"; do name="${name%/}";done
  test "${#name}" = 1 || name="${name##*/}" 
  test -z "$suffix" || name="${name%$suffix}" 
  echo "$name"
}

prepare_aufs() {
  local tgt="$1" src="${2:-mem}"
  local rw="$(mktemp -d /mnt/aufs-rw.XXXXXX)"
  local rw_dst="$tgt/.parts/rw"
  mntopts=rw chained_mount "$src" "$rw" >&2
  if touch "$rw/.write-test";then
    rm "$rw/.write-test"
  else
    mount -o remount,rw "$src" "$rw"
  fi
  mkdir -p "$tgt"
  mount -t aufs -o dirs="$rw=rw" aufs "$tgt"
  mkdir -p "$rw_dst"
  mount -o move "$rw" "$rw_dst"
  rmdir "$rw"
  echo "$rw_dst"
}

insert_aufs() {
  local tgt="$1" src="$2" part_dir src_name
  if test -d "$src";then
    part_dir="$src"
  else
    src_name="${src##*/}"
    part_dir="$tgt/.parts/${src_name%.*}"
    mkdir -p "$part_dir"
    chained_mount "$src" "$part_dir"
  fi
  mount -t aufs -o remount,ins:1:"$part_dir=rr" aufs "$tgt"
}

prepare_ovl() {
  local root_mnt="$1" storage="${2:-mem}" _t
  _ovl_storage="$(mktemp -d /mnt/ovl-rw.XXXXXX)"
  mntopts=rw chained_mount "$storage" "$_ovl_storage" >&2
  _t="$(mktemp "$_ovl_storage/.write-test-XXXXXX")" && rm "$_t" || mount -o remount,rw "$storage" "$_ovl_storage"
  mkdir -p "$root_mnt" "$_ovl_storage/data"
  echo "$_ovl_storage/data"
}

finalize_ovl() {
  local root_mnt="$1" live="$2" ov_part ov_part_dirs part_mnt lower_list
  local ovl_rw="${live%/data/live}"
  for ov_part in $_ovl_parts;do
    if test -d "$ov_part";then
      part_mnt="$ov_part"
    else
      part_mnt="/.parts/${ov_part##*/}"
      part_mnt="${part_mnt%.sfs}.$(stat -c %Y "$ov_part")"
      mkdir -p "$part_mnt"
      chained_mount "$ov_part" "$part_mnt"
      ov_part_dirs="${ov_part_dirs:+$ov_part_dirs }$part_mnt"
    fi
    lower_list="$part_mnt${lower_list:+:$lower_list}"
  done
  mkdir -p "$ovl_rw/.ovl"
  mount -t overlay -o "lowerdir=$lower_list,upperdir=$ovl_rw/data,workdir=$ovl_rw/.ovl" root-ovl "$root_mnt"
  mkdir -p "$root_mnt/.parts/rw"
  mount -o move "$ovl_rw" "$root_mnt/.parts/rw"
  for ov_part in $ov_part_dirs;do
    part_mnt="$root_mnt/.parts/${ov_part##*/}"
    mkdir -p "$part_mnt"
    mount -o move "$ov_part" "$part_mnt"
  done
  echo "$root_mnt/.parts/rw/data/live"
}

detect_root_type() {
  local _be
  test -n "$root_backend" || {
    for _be in aufs overlay;do
      if grep -qw $_be /proc/filesystems || modprobe $_be;then
        root_backend="$_be"
        break
      fi
    done
  }
  case "$root_backend" in
    aufs)
      prepare_root() { prepare_aufs "$@"; }
      insert_root() { insert_aufs "$@"; }
      finalize_root() { echo "$2"; }
    ;;
    overlay)
      prepare_root() { prepare_ovl "$@"; }
      insert_root() { _ovl_parts="${_ovl_parts:+$_ovl_parts }$2"; }
      finalize_root() { finalize_ovl "$@"; }
    ;;
    *)
      echo "Don't know how to prepare '$root_backend' root backend" >&2
      return 1
    ;;
  esac
}

expand_vars() {
  case "$1" in
    *"\$"*) eval echo -n "$1" ;;
    *) echo -n "$1";;
  esac
}

copy_part() {
  local live="$1" part_comp="$2"
  local part_src="${part_comp%/*}"
  part_src="${part_src#$live/src/}"
  test -e /tmp/.last-copy-part-src && test "x$(cat /tmp/.last-copy-part-src)" = "x$part_src" || {
    echo "$part_src" >/tmp/.last-copy-part-src
    echo "Copying from $part_src:" >&2
  }
  local copy_start_stamp="$(date +%s)"
  local copy_size="$(stat -L -c %s "$part_comp")"
  echo -n "  ${part_comp##*/} ${copy_size:+($(($copy_size/1024)) kB)}.. " >&2
  if test "$(stat -c %D "$part_comp")" = "$(stat -c %D "$live")";then
    mv "$part_comp" "$live" >&2
  else
    if test -d "$part_comp";then
      cp -r "$part_comp"/* "$live/.." >&2
      part_comp=""
    else
      cp "$part_comp" "$live" >&2
    fi
  fi
  local copy_end_stamp="$(date +%s)"
  local copy_seconds="$(($copy_end_stamp-$copy_start_stamp))"
  test ! "x$copy_seconds" = "x0" || copy_size=""
  echo "ok. (${copy_seconds}s${copy_size:+, $(($copy_size/1024/$copy_seconds)) kB/s})" >&2
  test -z "$part_comp" || part_comp="$live/${part_comp##*/}"
  echo "$part_comp"
}

cleanup_mnt() {
  local mnt="$1" x y mpt
  grep " $mnt" /proc/mounts | tac | while read x mpt y;do
    umount "$mpt"
    rmdir "$mpt"
  done
}

mount_root() {
  local src="$1" copy_up="" rw_comp="" part part_dst part_comp live live_id
  case "$src" in mem:*) copy_up="mem"; src="${src#mem:}";esac
  case "$src" in
    *+*)
      rw_comp="${src##*+}"; src="${src%+*}"
      case "$rw_comp" in :*)
        rw_comp="${src%%:*}$rw_comp"
        src=":${src#*:}"
        echo -n "/live/" >/tmp/.last-dev
      ;; esac
    ;;
    *)
      mkdir -p /realroot
      chained_mount "$src" /realroot
      return
    ;;
  esac
  detect_root_type
  live="$(prepare_root "$rr" "$rw_comp")/live"
  mkdir -p "$live${copy_up:+/src}"
  live_id="$(stat -c %D "$live")"
  for part in $(str_split + $src);do
    part="$(expand_vars "$part")"
    for part_comp in $(prepare_file "$part" "$live${copy_up:+/src}");do
      test -z "$copy_up" || part_comp="$(copy_part "$live" "$part_comp")"
      test -z "$part_comp" || insert_root "$rr" "$part_comp"
    done
  done
  live="$(finalize_root "$rr" "$live")"
  test -z "$copy_up" || cleanup_mnt "$live/src"
  test "$(stat -c %D "$live")" = "$live_id" || mount -o move "$live" "$rr/live"
}

run_parts() {
  local dir="$1"
  shift
  for script in "$dir"/*;do
    case "$script" in
      *.sh) . "$script";;
      *) test ! -x "$script" || "$script" "$@" ;;
    esac
  done
}

enter_stage () {
  set +x
  stage="$1"
  test -z "$verbose" || echo "[$stage]"
  test "$brk" != "$stage" || exit
  case ",$verbose," in ",all,"|*,"$stage",*) set -x;;esac
  test ! -r "/scripts/$stage" || . "/scripts/$stage"
  test ! -d "/scripts/$stage.d" || run_parts "/scripts/$stage.d"
}

init_env () {
  local cmd cmdline var val f
  test ! -r /cmdline || cmdlinefile=/cmdline
  read cmdline <${cmdlinefile:-/proc/cmdline}
  for cmd in $cmdline;do
    case "$cmd" in
      no_volid) no_volid=1 ;;
      quiet) quiet="1" qswitch="-q" ;;
      stderr=*) exec 2>${cmd#stderr=} ;;
      stdout=*) exec >${cmd#stdout=} ;;
      quiet=*) quiet="${cmd#quiet=}" qswitch="-q" ;;
      verbose=*|verbose) qswitch="-v" verbose="${cmd#verbose=}" ;;
      break=*) brk="${cmd#break=}" ;;
      break) brk="finalize" ;;
      *=*) case "${cmd%%=*}" in *.*) ;; *) export ${cmd%%=*}="${cmd#*=}";; esac;;
    esac
  done

  for f in /lib*/*-*/libnss_*;do
    if test -e "$f";then
      case "$LD_LIBRARY_PATH" in *${f%/*}*) continue;; esac
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}${f%/*}"
    fi
  done
}


auto_root() {
  local devname
  for devname in $(list_partitions);do
    if test "$(fs_type "$devname")" = "crypto_LUKS";then
      if prepare_dev $devname && prepare_dev @ROOT 5;then
        root=$prepared_device
        break
      fi
    fi
  done
  test -n "$root" || {
    if prepare_dev @ROOT 5;then
      root=$prepared_device
    fi
  }
}

refresh_lvm() {
  rm -f /etc/lvm/cache/.cache
  lvm vgscan --mknodes
  lvm vgchange -a y
}

exit_trap() {
  echo "ramdisk init($0) exits. stage=$stage${brk:+ break=$brk}."
  test "${quiet:-0}" -gt 1 || { set -x ; set; }
  if test -x /bin/busybox;then
    exec /bin/busybox sh
  else
    exec /bin/sh
  fi
}
